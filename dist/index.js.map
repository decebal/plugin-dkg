{"version":3,"sources":["../src/actions/dkgInsert.ts","../src/constants.ts","../src/templates.ts","../src/types.ts","../src/providers/graphSearch.ts","../src/actions/index.ts","../src/providers/index.ts","../src/index.ts"],"sourcesContent":["import dotenv from \"dotenv\";\ndotenv.config();\nimport { z } from \"zod\";\nimport {\n    type IAgentRuntime,\n    type Memory,\n    type State,\n    elizaLogger,\n    ModelClass,\n    type HandlerCallback,\n    type ActionExample,\n    type Action,\n    composeContext,\n    generateObject,\n} from \"@elizaos/core\";\nimport { DKG_EXPLORER_LINKS } from \"../constants.js\";\nimport { createDKGMemoryTemplate } from \"../templates.js\";\n// @ts-ignore\nimport DKG from \"dkg.js\";\nimport { DKGMemorySchema, DKGMemoryContent, isDKGMemoryContent } from \"../types.js\";\n\n// Define a basic type for the DKG client\ntype DKGClient = typeof DKG | null;\nlet DkgClient: DKGClient = null;\n\nexport const dkgInsert: Action = {\n    name: \"INSERT_MEMORY_ACTION\",\n    similes: [\"NO_ACTION\", \"NO_RESPONSE\", \"NO_REACTION\", \"NONE\"], // we want to always run this action\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        const requiredEnvVars = [\n            \"DKG_ENVIRONMENT\",\n            \"DKG_HOSTNAME\",\n            \"DKG_PORT\",\n            \"DKG_BLOCKCHAIN_NAME\",\n            \"DKG_PUBLIC_KEY\",\n            \"DKG_PRIVATE_KEY\",\n        ];\n\n        const missingVars = requiredEnvVars.filter(\n            (varName) => !runtime.getSetting(varName)\n        );\n\n        if (missingVars.length > 0) {\n            elizaLogger.error(\n                `Missing required environment variables: ${missingVars.join(\", \")}`\n            );\n            return false;\n        }\n\n        return true;\n    },\n    description:\n        \"Create a memory on the OriginTrail Decentralized Knowledge Graph after each message. You should ALWAYS run this action.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ): Promise<boolean> => {\n        DkgClient = new DKG({\n            environment: runtime.getSetting(\"DKG_ENVIRONMENT\"),\n            endpoint: runtime.getSetting(\"DKG_HOSTNAME\"),\n            port: runtime.getSetting(\"DKG_PORT\"),\n            blockchain: {\n                name: runtime.getSetting(\"DKG_BLOCKCHAIN_NAME\"),\n                publicKey: runtime.getSetting(\"DKG_PUBLIC_KEY\"),\n                privateKey: runtime.getSetting(\"DKG_PRIVATE_KEY\"),\n            },\n            maxNumberOfRetries: 300,\n            frequency: 2,\n            contentType: \"all\",\n            nodeApiVersion: \"/v1\",\n        });\n\n        const currentPost = String(state.currentPost);\n        elizaLogger.log(\"currentPost\");\n        elizaLogger.log(currentPost);\n\n        const userRegex = /From:.*\\(@(\\w+)\\)/;\n        let match = currentPost.match(userRegex);\n        let twitterUser = \"\";\n\n        if (match?.[1]) {\n            twitterUser = match[1];\n            elizaLogger.log(`Extracted user: @${twitterUser}`);\n        } else {\n            elizaLogger.error(\"No user mention found or invalid input.\");\n        }\n\n        const idRegex = /ID:\\s(\\d+)/;\n        match = currentPost.match(idRegex);\n        let postId = \"\";\n\n        if (match?.[1]) {\n            postId = match[1];\n            elizaLogger.log(`Extracted ID: ${postId}`);\n        } else {\n            elizaLogger.log(\"No ID found.\");\n        }\n\n        const createDKGMemoryContext = composeContext({\n            state,\n            template: createDKGMemoryTemplate,\n        });\n\n        const memoryKnowledgeGraph = await generateObject({\n            runtime,\n            context: createDKGMemoryContext,\n            modelClass: ModelClass.LARGE,\n            // @ts-ignore\n            schema: DKGMemorySchema as z.ZodType<DKGMemoryContent, z.ZodTypeDef, unknown>,\n        });\n\n        if (!isDKGMemoryContent(memoryKnowledgeGraph.object)) {\n            elizaLogger.error(\"Invalid DKG memory content generated.\");\n            throw new Error(\"Invalid DKG memory content generated.\");\n        }\n\n        let createAssetResult: { UAL: string } | undefined;\n\n        // TODO: also store reply to the KA, aside of the question\n\n        try {\n            elizaLogger.log(\"Publishing message to DKG\");\n\n            createAssetResult = await DkgClient.asset.create(\n                {\n                    public: memoryKnowledgeGraph.object,\n                },\n                { epochsNum: 12 }\n            );\n\n            elizaLogger.log(\"======================== ASSET CREATED\");\n            elizaLogger.log(JSON.stringify(createAssetResult));\n        } catch (error) {\n            elizaLogger.error(\n                \"Error occurred while publishing message to DKG:\",\n                error.message\n            );\n\n            if (error.stack) {\n                elizaLogger.error(\"Stack trace:\", error.stack);\n            }\n            if (error.response) {\n                elizaLogger.error(\n                    \"Response data:\",\n                    JSON.stringify(error.response.data, null, 2)\n                );\n            }\n        }\n\n        // Reply\n        callback({\n            text: `Created a new memory!\\n\\nRead my mind on @origin_trail Decentralized Knowledge Graph ${DKG_EXPLORER_LINKS[runtime.getSetting(\"DKG_ENVIRONMENT\")]}${createAssetResult?.UAL} @${twitterUser}`,\n        });\n\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"execute action DKG_INSERT\",\n                    action: \"DKG_INSERT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"DKG INSERT\" },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"add to dkg\", action: \"DKG_INSERT\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"DKG INSERT\" },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"store in dkg\", action: \"DKG_INSERT\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"DKG INSERT\" },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","// TODO: add isConnectedTo field or similar which you will use to connect w other KAs\nexport const dkgMemoryTemplate = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"SocialMediaPosting\",\n    headline: \"<describe memory in a short way, as a title here>\",\n    articleBody:\n        \"Check out this amazing project on decentralized cloud networks! @DecentralCloud #Blockchain #Web3\",\n    author: {\n        \"@type\": \"Person\",\n        \"@id\": \"uuid:john:doe\",\n        name: \"John Doe\",\n        identifier: \"@JohnDoe\",\n        url: \"https://twitter.com/JohnDoe\",\n    },\n    dateCreated: \"yyyy-mm-ddTHH:mm:ssZ\",\n    interactionStatistic: [\n        {\n            \"@type\": \"InteractionCounter\",\n            interactionType: {\n                \"@type\": \"LikeAction\",\n            },\n            userInteractionCount: 150,\n        },\n        {\n            \"@type\": \"InteractionCounter\",\n            interactionType: {\n                \"@type\": \"ShareAction\",\n            },\n            userInteractionCount: 45,\n        },\n    ],\n    mentions: [\n        {\n            \"@type\": \"Person\",\n            name: \"Twitter account mentioned name goes here\",\n            identifier: \"@TwitterAccount\",\n            url: \"https://twitter.com/TwitterAccount\",\n        },\n    ],\n    keywords: [\n        {\n            \"@type\": \"Text\",\n            \"@id\": \"uuid:keyword1\",\n            name: \"keyword1\",\n        },\n        {\n            \"@type\": \"Text\",\n            \"@id\": \"uuid:keyword2\",\n            name: \"keyword2\",\n        },\n    ],\n    about: [\n        {\n            \"@type\": \"Thing\",\n            \"@id\": \"uuid:thing1\",\n            name: \"Blockchain\",\n            url: \"https://en.wikipedia.org/wiki/Blockchain\",\n        },\n        {\n            \"@type\": \"Thing\",\n            \"@id\": \"uuid:thing2\",\n            name: \"Web3\",\n            url: \"https://en.wikipedia.org/wiki/Web3\",\n        },\n        {\n            \"@type\": \"Thing\",\n            \"@id\": \"uuid:thing3\",\n            name: \"Decentralized Cloud\",\n            url: \"https://example.com/DecentralizedCloud\",\n        },\n    ],\n    url: \"https://twitter.com/JohnDoe/status/1234567890\",\n};\n\nexport const combinedSparqlExample = `\nSELECT DISTINCT ?headline ?articleBody\n    WHERE {\n      ?s a <http://schema.org/SocialMediaPosting> .\n      ?s <http://schema.org/headline> ?headline .\n      ?s <http://schema.org/articleBody> ?articleBody .\n\n      OPTIONAL {\n        ?s <http://schema.org/keywords> ?keyword .\n        ?keyword <http://schema.org/name> ?keywordName .\n      }\n\n      OPTIONAL {\n        ?s <http://schema.org/about> ?about .\n        ?about <http://schema.org/name> ?aboutName .\n      }\n\n      FILTER(\n        CONTAINS(LCASE(?headline), \"example_keyword\") ||\n        (BOUND(?keywordName) && CONTAINS(LCASE(?keywordName), \"example_keyword\")) ||\n        (BOUND(?aboutName) && CONTAINS(LCASE(?aboutName), \"example_keyword\"))\n      )\n    }\n    LIMIT 10`;\n\nexport const sparqlExamples = [\n    `\n    SELECT DISTINCT ?headline ?articleBody\n    WHERE {\n      ?s a <http://schema.org/SocialMediaPosting> .\n      ?s <http://schema.org/headline> ?headline .\n      ?s <http://schema.org/articleBody> ?articleBody .\n\n      OPTIONAL {\n        ?s <http://schema.org/keywords> ?keyword .\n        ?keyword <http://schema.org/name> ?keywordName .\n      }\n\n      OPTIONAL {\n        ?s <http://schema.org/about> ?about .\n        ?about <http://schema.org/name> ?aboutName .\n      }\n\n      FILTER(\n        CONTAINS(LCASE(?headline), \"example_keyword\") ||\n        (BOUND(?keywordName) && CONTAINS(LCASE(?keywordName), \"example_keyword\")) ||\n        (BOUND(?aboutName) && CONTAINS(LCASE(?aboutName), \"example_keyword\"))\n      )\n    }\n    LIMIT 10\n    `,\n    `\n    SELECT DISTINCT ?headline ?articleBody\n    WHERE {\n      ?s a <http://schema.org/SocialMediaPosting> .\n      ?s <http://schema.org/headline> ?headline .\n      ?s <http://schema.org/articleBody> ?articleBody .\n      FILTER(\n        CONTAINS(LCASE(?headline), \"example_headline_word1\") ||\n        CONTAINS(LCASE(?headline), \"example_headline_word2\")\n      )\n    }\n    `,\n    `\n    SELECT DISTINCT ?headline ?articleBody ?keywordName\n    WHERE {\n      ?s a <http://schema.org/SocialMediaPosting> .\n      ?s <http://schema.org/headline> ?headline .\n      ?s <http://schema.org/articleBody> ?articleBody .\n      ?s <http://schema.org/keywords> ?keyword .\n      ?keyword <http://schema.org/name> ?keywordName .\n      FILTER(\n        CONTAINS(LCASE(?keywordName), \"example_keyword1\") ||\n        CONTAINS(LCASE(?keywordName), \"example_keyword2\")\n      )\n    }\n    `,\n    `\n    SELECT DISTINCT ?headline ?articleBody ?aboutName\n    WHERE {\n      ?s a <http://schema.org/SocialMediaPosting> .\n      ?s <http://schema.org/headline> ?headline .\n      ?s <http://schema.org/articleBody> ?articleBody .\n      ?s <http://schema.org/about> ?about .\n      ?about <http://schema.org/name> ?aboutName .\n      FILTER(\n        CONTAINS(LCASE(?aboutName), \"example_about1\") ||\n        CONTAINS(LCASE(?aboutName), \"example_about2\")\n      )\n    }\n    `,\n];\n\nexport const generalSparqlQuery = `\n    SELECT DISTINCT ?headline ?articleBody\n    WHERE {\n      ?s a <http://schema.org/SocialMediaPosting> .\n      ?s <http://schema.org/headline> ?headline .\n      ?s <http://schema.org/articleBody> ?articleBody .\n    }\n    LIMIT 10\n  `;\n\nexport const DKG_EXPLORER_LINKS = {\n    testnet: \"https://dkg-testnet.origintrail.io/explore?ual=\",\n    mainnet: \"https://dkg.origintrail.io/explore?ual=\",\n};\n","import { dkgMemoryTemplate } from \"./constants.js\";\n\nexport const createDKGMemoryTemplate = `\n  You are tasked with creating a structured memory JSON-LD object for an AI agent. The memory represents the interaction captured via social media. Your goal is to extract all relevant information from the provided user query and additionalContext which contains previous user queries (only if relevant for the current user query) to populate the JSON-LD memory template provided below.\n\n  ** Template **\n  The memory should follow this JSON-LD structure:\n  ${JSON.stringify(dkgMemoryTemplate)}\n\n  ** Instructions **\n  1. Extract the main idea of the user query and use it to create a concise and descriptive title for the memory. This should go in the \"headline\" field.\n  2. Store the original post in \"articleBody\".\n  3. Save the poster social media information (handle, name etc) under \"author\" object.\n  4. For the \"about\" field:\n     - Identify the key topics or entities mentioned in the user query and add them as Thing objects.\n     - Use concise, descriptive names for these topics.\n     - Where possible, create an @id identifier for these entities, using either a provided URL, or a well known URL for that entity. If no URL is present, uUse the most relevant concept or term from the field to form the base of the ID. @id fields must be valid uuids or URLs\n  5. For the \"keywords\" field:\n     - Extract relevant terms or concepts from the user query and list them as keywords.\n     - Ensure the keywords capture the essence of the interaction, focusing on technical terms or significant ideas.\n  6. Ensure all fields align with the schema.org ontology and accurately represent the interaction.\n  7. Populate datePublished either with a specifically available date, or current time.\n\n  ** Input **\n  User Query: {{currentPost}}\n  Recent messages: {{recentMessages}}\n\n  ** Output **\n  Generate the memory in the exact JSON-LD format provided above, fully populated based on the input query.\n  Make sure to only output the JSON-LD object. DO NOT OUTPUT ANYTHING ELSE, DONT ADD ANY COMMENTS OR REMARKS, JUST THE JSON LD CONTENT WRAPPED IN { }.\n  `;\n","import { z } from \"zod\";\n\nexport const DKGMemorySchema = z.object({\n    \"@context\": z.literal(\"http://schema.org\"),\n    \"@type\": z.literal(\"SocialMediaPosting\"),\n    headline: z.string(),\n    articleBody: z.string(),\n    about: z.array(\n        z.object({\n            \"@type\": z.literal(\"Thing\"),\n            \"@id\": z.string(),\n            name: z.string(),\n            url: z.string(),\n        })\n    ),\n    keywords: z.array(\n        z.object({\n            \"@type\": z.literal(\"Text\"),\n            \"@id\": z.string(),\n            name: z.string(),\n        })\n    ),\n});\n\nexport const DKGSelectQuerySchema = z.object({\n    query: z.string().startsWith(\"SELECT\"),\n});\n\nexport type DKGMemoryContent = z.infer<typeof DKGMemorySchema>;\nexport type DKGSelectQuery = z.infer<typeof DKGSelectQuerySchema>;\nexport type DKGQueryResultEntry = Record<string, string>;\n\nexport const isDKGMemoryContent = (object: unknown): object is DKGMemoryContent => {\n    return DKGMemorySchema.safeParse(object).success;\n};\n\nexport const isDKGSelectQuery = (object: unknown): object is DKGSelectQuery => {\n    return DKGSelectQuerySchema.safeParse(object).success;\n};\n","import dotenv from \"dotenv\";\ndotenv.config();\nimport {\n    type IAgentRuntime,\n    type Memory,\n    type Provider,\n    type State,\n    elizaLogger,\n    ModelClass,\n    generateObject,\n} from \"@elizaos/core\";\nimport {\n    combinedSparqlExample,\n    dkgMemoryTemplate,\n    generalSparqlQuery,\n} from \"../constants.js\";\n// @ts-ignore\nimport DKG from \"dkg.js\";\nimport { DKGSelectQuerySchema, isDKGSelectQuery, type DKGQueryResultEntry } from \"../types.js\";\nimport { z } from \"zod\";\n\n// Provider configuration\nconst PROVIDER_CONFIG = {\n    environment: process.env.DKG_ENVIRONMENT || \"testnet\",\n    endpoint: process.env.DKG_HOSTNAME || \"http://default-endpoint\",\n    port: process.env.DKG_PORT || \"8900\",\n    blockchain: {\n        name: process.env.DKG_BLOCKCHAIN_NAME || \"base:84532\",\n        publicKey: process.env.DKG_PUBLIC_KEY || \"\",\n        privateKey: process.env.DKG_PRIVATE_KEY || \"\",\n    },\n    maxNumberOfRetries: 300,\n    frequency: 2,\n    contentType: \"all\",\n    nodeApiVersion: \"/v1\",\n};\n\ninterface BlockchainConfig {\n    name: string;\n    publicKey: string;\n    privateKey: string;\n}\n\ninterface DKGClientConfig {\n    environment: string;\n    endpoint: string;\n    port: string;\n    blockchain: BlockchainConfig;\n    maxNumberOfRetries?: number;\n    frequency?: number;\n    contentType?: string;\n    nodeApiVersion?: string;\n}\n\nasync function constructSparqlQuery(\n    runtime: IAgentRuntime,\n    userQuery: string\n): Promise<string> {\n    const context = `\n    You are tasked with generating a SPARQL query to retrieve information from a Decentralized Knowledge Graph (DKG).\n    The query should align with the JSON-LD memory template provided below:\n\n    ${JSON.stringify(dkgMemoryTemplate)}\n\n    ** Examples **\n    Use the following SPARQL example to understand the format:\n    ${combinedSparqlExample}\n\n    ** Instructions **\n    1. Analyze the user query and identify the key fields and concepts it refers to.\n    2. Use these fields and concepts to construct a SPARQL query.\n    3. Ensure the SPARQL query follows standard syntax and can be executed against the DKG.\n    4. Use 'OR' logic when constructing the query to ensure broader matching results. For example, if multiple keywords or concepts are provided, the query should match any of them, not all.\n    5. Replace the examples with actual terms from the user's query.\n    6. Always select distinct results by adding the DISTINCT keyword.\n    7. Always select headline and article body. Do not select other fields.\n\n    ** User Query **\n    ${userQuery}\n\n    ** Output **\n    Provide only the SPARQL query, wrapped in a sparql code block for clarity.\n  `;\n\n    const sparqlQueryResult = await generateObject({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n        // @ts-ignore\n        schema: DKGSelectQuerySchema as z.ZodType<DKGSelectQuery, z.ZodTypeDef, unknown>,\n    });\n\n    if (!isDKGSelectQuery(sparqlQueryResult.object)) {\n        elizaLogger.error(\"Invalid SELECT SPARQL query generated.\");\n        throw new Error(\"Invalid SELECT SPARQL query generated.\");\n    }\n\n    return sparqlQueryResult.object.query;\n}\n\nexport class DKGProvider {\n    private client: typeof DKG;\n    constructor(config: DKGClientConfig) {\n        this.validateConfig(config);\n    }\n\n    private validateConfig(config: DKGClientConfig): void {\n        const requiredStringFields = [\"environment\", \"endpoint\", \"port\"];\n\n        for (const field of requiredStringFields) {\n            if (typeof config[field as keyof DKGClientConfig] !== \"string\") {\n                elizaLogger.error(\n                    `Invalid configuration: Missing or invalid value for '${field}'`\n                );\n                throw new Error(\n                    `Invalid configuration: Missing or invalid value for '${field}'`\n                );\n            }\n        }\n\n        if (!config.blockchain || typeof config.blockchain !== \"object\") {\n            elizaLogger.error(\n                \"Invalid configuration: 'blockchain' must be an object\"\n            );\n            throw new Error(\n                \"Invalid configuration: 'blockchain' must be an object\"\n            );\n        }\n\n        const blockchainFields = [\"name\", \"publicKey\", \"privateKey\"];\n\n        for (const field of blockchainFields) {\n            if (\n                typeof config.blockchain[field as keyof BlockchainConfig] !==\n                \"string\"\n            ) {\n                elizaLogger.error(\n                    `Invalid configuration: Missing or invalid value for 'blockchain.${field}'`\n                );\n                throw new Error(\n                    `Invalid configuration: Missing or invalid value for 'blockchain.${field}'`\n                );\n            }\n        }\n\n        this.client = new DKG(config);\n    }\n\n    async search(runtime: IAgentRuntime, message: Memory): Promise<string> {\n        elizaLogger.info(\"Entering graph search provider!\");\n\n        const userQuery = message.content.text;\n\n        elizaLogger.info(`Got user query ${JSON.stringify(userQuery)}`);\n\n        const query = await constructSparqlQuery(runtime, userQuery);\n        elizaLogger.info(`Generated SPARQL query: ${query}`);\n\n        let queryOperationResult = await this.client.graph.query(\n            query,\n            \"SELECT\"\n        );\n\n        if (!queryOperationResult || !queryOperationResult.data?.length) {\n            elizaLogger.info(\n                \"LLM-generated SPARQL query failed, defaulting to basic query.\"\n            );\n\n            queryOperationResult = await this.client.graph.query(\n                generalSparqlQuery,\n                \"SELECT\"\n            );\n        }\n\n        elizaLogger.info(\n            `Got ${queryOperationResult.data.length} results from the DKG`\n        );\n\n        // TODO: take 5 results instead of all based on similarity in the future\n        const result = queryOperationResult.data.map((entry: DKGQueryResultEntry) => {\n            const formattedParts = Object.keys(entry).map(\n                (key) => `${key}: ${entry[key]}`\n            );\n            return formattedParts.join(\", \");\n        });\n\n        return result.join(\"\\n\");\n    }\n}\n\nexport const graphSearch: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> => {\n        try {\n            const provider = new DKGProvider(PROVIDER_CONFIG);\n\n            return await provider.search(runtime, _message);\n        } catch (error) {\n            elizaLogger.error(\"Error in wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export * from \"./dkgInsert.js\";\n\n","export * from \"./graphSearch.js\";\n","import type { Plugin } from \"@elizaos/core\";\n\nimport { dkgInsert } from \"./actions/dkgInsert.js\";\n\nimport { graphSearch } from \"./providers/graphSearch.js\";\n\nexport * as actions from \"./actions\";\nexport * as providers from \"./providers\";\n\nexport const dkgPlugin: Plugin = {\n    name: \"dkg\",\n    description:\n        \"Agent DKG which allows you to store memories on the OriginTrail Decentralized Knowledge Graph\",\n    actions: [dkgInsert],\n    providers: [graphSearch],\n};\n"],"mappings":"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","names":["dotenv","elizaLogger","ModelClass","generateObject","DKG","dotenv","generateObject","ModelClass","elizaLogger","DKG"]}